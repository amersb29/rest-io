"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec" 
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

#import users.graphql
#import products.graphql
#import videos.graphql
#import sedes.graphql
#import subscribers.graphql

type Query {
    users: [User!]! @all @middleware(checks: ["auth:api"])
    # @paginate(type: "paginator" model: "App\\User")
    user(id: ID @eq): User @find(model: "App\\User") @middleware(checks: ["auth:api"])
    user(email: String @eq): User @find(model: "App\\User")

    products: [Product] @all
    product(id: ID @eq): Product @find(model: "App\\Product")
    # Query para el sitio de IO
    productsFilter(tipo_producto_id: Int! @eq): [Product] @all(model: "App\\Product")

    memberships: [Membership] @all
    membership(id: ID @eq): Membership @find(model: "App\\Membership")

    countries: [Country] @all
    country(id: ID @eq): Country @find(model: "App\\Country")

    roles: [Role] @all
    role(id: ID @eq): Role @find(model: "App\\Role")
    
    paymentMethods: [PaymentMethod] @all
    paymentMethod(id: ID @eq): PaymentMethod @find(model: "App\\PaymentMethod")

    payments: [Payment] @all
    payments(user_id: Int! @eq): [Payment] @all

    coupons: [Coupon] @all
    coupon(code: String! @eq): Coupon @find(model: "App\\Coupon")

    tiposProducto: [TipoProducto] @all

    sedes: [Sede] @all
    sede( id: ID! @eq): Sede @find
    sede_filter(countries_id: Int! @eq): [Sede] @all

    banners(sede_id: ID! @eq): [Banner] @all
}

type Membership {
    id: ID!
    tipoProducto: TipoProducto!
    courses: Int!
    conferences: Int!
    users: [User] @hasMany
}

type Country {
    id: ID!
    name: String!
    code: String!
    users: [User] @hasMany
    sedes: [Sede] @hasMany
}

type Role {
    id: ID!
    name: String!
    description: String
    permissions: [Permission!]! @belongsToMany
    users: [User!]! @belongsToMany
}

type Permission {
    id: ID!
    name: String!
    description: String
    roles: [Role!]! @belongsToMany
}

type PaymentMethod {
    id: ID!
    name: String!
    description: String!
    users: [User!]! @belongsToMany
}

type Payment { 
    id: ID!
    user: User! @belongsTo
    payment_method: PaymentMethod @belongsTo
    total_ammount: Float!
}

type Coupon {
    id: ID!
    code: String!
    discount: Float!
    expiration: Date!
    users: [User!]! @belongsToMany
}

type Notebook {
    id: ID!
    name: String!
    product: Product! @belongsTo
}

input RolesRelation {
    # create: [RolesInput!]
    # connect: [ID!]
    sync: [ID!]
    delete: [ID!]
    disconnect: [ID!]
}

input RolesInput {
    id: ID
    name: String
    description: String
}

type Mutation {

    createUser( input: CreateUserInput! @spread ): User @create(model: "App\\User")
    deleteUser( input: DeleteUserInput! @spread ): User @delete(model: "App\\User")
    # updateUser( input: UpdateInput! @spread ): User @update(model: "App\\User")
        
    createProduct( input: CreateProductInput! @spread ): Product @create(model: "App\\Product")
    updateProduct( input: UpdateProductInput! @spread ): Product @update(model: "App\\Product")
    deleteProduct( input: DeleteProductInput! @spread ): Product @delete(model: "App\\Product")
    
    createSede( input: CreateSedeInput! @spread ): Sede @create(model: "App\\Sede")
    updateSede( input: UpdateSedeInput! @spread ): Sede @update(model: "App\\Sede")
    deleteSede( input: DeleteSedeInput! @spread ): Sede @delete(model: "App\\Sede")
    
    deleteBanner( input: DeleteBannerInput! @spread ): Banner @delete(model: "App\\Banner")

    createMembership(
        name: String @rules(apply: ["required"])
        price: Float @rules(apply: ["required"])
    ): Membership @create(model: "App\\Membership")
    updateMembership(
        id: ID @rules(apply: ["required"])
        name: String 
        price: Float 
    ): Membership @update(model: "App\\Membership")
    deleteMembership(
        id: ID! @rules(apply: ["required"])
    ): Membership @delete(model: "App\\Membership")

    createRole(
        name: String @rules(apply: ["required"])
        description: String
    ): Role @create(model: "App\\Role")
    updateRole(
        id: ID @rules(apply: ["required"])
        name: String
        description: String
    ): Role @update(model: "App\\Role")
    deleteRole(
        id: ID! @rules(apply: ["required"])
    ): Role @delete(model: "App\\Role")

    createPaymentMethod(
        name: String @rules(apply: ["required"])
        description: String @rules(apply: ["required"])
    ): PaymentMethod @create(model: "App\\PaymentMethod")
    updatePaymentMethod(
        id: ID @rules(apply: ["required"])
        name: String
        description: String
    ): PaymentMethod @update(model: "App\\PaymentMethod")
    deletePaymentMethod(
        id: ID! @rules(apply: ["required"])
    ): PaymentMethod @delete(model: "App\\PaymentMethod")
    
    createCountry(
        name: String @rules(apply: ["required"])
        code: String @rules(apply: ["required"])
    ): Country @create(model: "App\\Country")
    updateCountry(
        id: ID @rules(apply: ["required"])
        name: String
        code: String
    ): Country @update(model: "App\\Country")
    deleteCountry(
        id: ID! @rules(apply: ["required"])
    ): Country @delete(model: "App\\Country")

    createTipoProducto(
        description: String @rules(apply: ["required"])
    ): TipoProducto @create(model: "App\\TipoProducto")
    updateTipoProducto(
        id: ID @rules(apply: ["required"])
        description: String
        price: Float
    ): TipoProducto @update(model: "App\\TipoProducto")
    deleteTipoProducto(
        id: ID! @rules(apply: ["required"])
    ): TipoProducto @delete(model: "App\\TipoProducto")

    upload(
        files: [Upload]
    ): String
}
