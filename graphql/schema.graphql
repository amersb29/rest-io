"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    users: [User!]! @all
    # @paginate(type: "paginator" model: "App\\User")
    user(id: ID @eq): User @find(model: "App\\User")

    memberships: [Membership] @all
    membership(id: ID @eq): Membership @find(model: "App\\Membership")

    roles: [Role] @all
    role(id: ID @eq): Role @find(model: "App\\Role")
    
    paymentMethods: [PaymentMethod] @all
    paymentMethod(id: ID @eq): PaymentMethod @find(model: "App\\PaymentMethod")

    purchases: [Purchase] @all
    purchases(user_id: Int! @eq): [Purchase] @all

    payments: [Payment] @all
    payments(user_id: Int! @eq): [Payment] @all

    # coupons: [Coupon] @all
    # coupon: Coupon(id: ID @eq): Coupon @find(model: "App\\Coupon")

    products: [Product] @all
    product(id: ID @eq): Product @find(model: "App\\Product")

    videos: [Video] @all
    videos(is_preview: Int! @eq): [Video] @all
    video(id: ID! @eq): Video @find(model: "App\\Video")

    notebooks: [Notebook] @all
    notebook(id: ID @eq): Notebook @find(model: "App\\Notebook")
}

type User {
    id: ID!
    state: Int!
    first_name: String!
    last_name: String!
    email: String!
    roles: [Role!]! @belongsToMany
    paymentMethods: [PaymentMethod] @belongsToMany
    # coupons: [Coupon] @belongsToMany
    membership: Membership @belongsTo
    products: [Product] @hasMany
    purchases: [Purchase] @hasMany
    payments: [Payment] @hasMany

    created_at: DateTime!
    updated_at: DateTime!
}

type Membership {
    id: ID!
    name: String!
    price: Int!
    users: [User] @hasMany
}

type Role {
    id: ID!
    name: String!
    description: String
    permissions: [Permission!]! @belongsToMany
    users: [User!]! @belongsToMany
}

type Permission {
    id: ID!
    name: String!
    description: String
    roles: [Role!]! @belongsToMany
}

type PaymentMethod {
    id: ID!
    name: String!
    description: String!
    users: [User!]! @belongsToMany
}

type Payment { 
    id: ID!
    user: User! @belongsTo
    purchase: Purchase! @belongsTo
    payment_method: PaymentMethod @belongsTo
    total_ammount: Float!
}

type Purchase {
    id: ID!
    user: User! @belongsTo
    products: [Product] @belongsToMany
    # purchase_status_id
}

# type Coupon {
#     id: ID!
#     code: String!
#     expiration: DateTime!
#     users: [User!]! @belongsToMany
# }

type TipoProducto {
    id: ID!
    description: String!
    products: [Product] @hasMany
}

type Product {
    id: ID!
    tipoProducto: TipoProducto!
    name: String!
    description: String!
    url_img: String!
    users: [User!]! @belongsToMany
    videos: [Video!]! @hasMany
    notebook: Notebook @hasOne
}

type Video {
    id: ID!
    name: String!
    vimeo_id: String!
    is_preview: Int!
    product: Product! @belongsTo
}

type Notebook {
    id: ID!
    name: String!
    product: Product! @belongsTo
}

type Mutation {
    createUser(
        first_name: String @rules(apply: ["required"])
        last_name: String @rules(apply: ["required"])
        email: String @rules(apply: ["required", "email", "unique:users,email"])
        password: String @rules(apply: ["required"])
    ): User @create(model: "App\\User")
}